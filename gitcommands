*). create a fork repository and then clone if from your forked repository...

git config --global user.email "mahimmm07@gmail.com"
git config --global user.name "Mahendra Barauniya"

*). 
git clone <git url>
git clone --branch="branch name" <url>   -- give branch without "

--renaming a branch
git branch -m <release_202201>  -- it will rename the current local branch to release_202201
when we commit our changes and push it.. it will push to our local repository..
Raise a PR and from our local repo to public repo.. get it approved and then merge the code.

*). 
git status   -- command to show the working tree status
        o/p:-> 
        On branch main
        Your branch is up to date with 'origin/main'.

        Changes not staged for commit:
        (use "git add <file>..." to update what will be committed)
        (use "git restore <file>..." to discard changes in working directory)
                modified:   gitcommands
--git help -a       -- will display all commands 
--git help status   -- will open manual page on browser ...
--git status  -h    -- will open help on terminal 


*). 
git pull origin develop_202201:develop_202201


*). git branch

*). git branch -a 

    $ git branch
    * master

    mahib@LAPTOP-NN3T9LKD MINGW64 /d/study/github/python (master)
    $ git branch -a
    * master
    remotes/origin/HEAD -> origin/master
    remotes/origin/develop_201909
    remotes/origin/master

*). git clean -f    -- clean up untracked files...



*). git log 
*). git log --oneline       -- it will give the commit id along with message and will tell us where the HEAD is...



*). checkout command in git: works in three distinct entities:
1.1). branch 
1.2). commit 
1.3). file 

1.1). branch : git checkout develop_202010_release1   --It will checkout from remote and create a new branch with same name.
git checkout -b <new_branch >   -- create a new branch and checkout the same.
git checkout origin/develop_202010_release1      -- checkout remote branch...

1.3). file:
to fetch a single file from repo...
checkout the respective branch from where you want to checkout the file then checkout that file.
git checkout FETCH_HEAD <file_name> 

--------------------------------------
git add   
git add . 
git commit -m ''
once we commit it will start reflecting in git ext also and then if you want to reset it from remote repo then use reset command
        -- changes from origin will be having origin/master and master will have your commit changes in git extension... only if you're in master branch..

-- if jira validation failed or some other issue in commit message while pushing then if you have to change the commit messge.

- to change last commit message:
    git commit --amend -m "New commit message" -- it will only change the last commit message...
- to change last n commit or pushed  message:  rebase using interactive rebase
        https://docs.github.com/en/pull-requests/committing-changes-to-your-project/creating-and-editing-commits/changing-a-commit-message

git rebase  -i HEAD~n 
--if we want to cahgne the commit message of last 2 message then...it will open a file ...change the work from pick to reword and chagne the commit message and then close it.
git rebase -i HEAD~2 

    The list will look similar to the following:

    pick e499d89 GBTJIRA-50- change for one extract 
    pick 0c39034 GBTJIRA-51- new file for load process   
    # p, pick = use commit
    # r, reword = use commit, but edit the commit message
    # e, edit = use commit, but stop for amending
    # s, squash = use commit, but meld into previous commit
    # f, fixup = like "squash", but discard this commit's log message
    # x, exec = run command (the rest of the line) using shell

        These lines can be re-ordered; they are executed from top to bottom.
        #
        # If you remove a line here THAT COMMIT WILL BE LOST.
        #
        # However, if you remove everything, the rebase will be aborted.
        #
        # Note that empty commits are commented out

    pick e499d89 GBTJIRA-50- change for one extract 
    reword 0c39034 GBTJIRA-51- new file for load process

git push 

---------------------------------------
*). git rebase : 


--------------------------------------
*). git reset : 


--------------------------------------

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Important points/topic in git:
*). what is HEAD in git?
When working with Git, only one branch can be checked out at a time - and this is what's called the "HEAD" branch.
HEAD is a symbolic reference pointing to wherever you are in your commit history.
It follows you wherever you go, whatever you do, like a shadow.
If you make a commit, HEAD will move. If you checkout something, HEAD will move. Whatever you do, if you have moved somewhere new in your commit history, HEAD has moved along with you.
